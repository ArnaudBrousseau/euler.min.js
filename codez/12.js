/*
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
 * first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *      1: 1
 *      3: 1,3
 *      6: 1,2,3,6
 *     10: 1,2,5,10
 *     15: 1,3,5,15
 *     21: 1,3,7,21
 *     28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 */

var findTriangleNumberWithMinDivisors = function(numMinDivisors) {
  var currentTriangleNumber = 1;
  var currentDivisors = [];

  for (var i=2;; i++) {
    currentTriangleNumber += i;
    currentDivisors = getDivisors(currentTriangleNumber);
    if (currentDivisors.length > numMinDivisors) {
      return currentTriangleNumber;
    }
  }
};

/**
 * Function to get a number's divisors, including itself and 1.
 *
 * This is a smart function because it uses a simple math property:
 * a is a divisor of b => it exists n0 such that b = n0 * a
 * => b can be written a * n0 => n0 is a divisor of b
 *
 * In other words, if you find a divisor, you actually find two!
 * Best part: the "matching" divisor gives you an updated bound for the rest of
 * your divisors quest.
 *
 * For instance, if I know a number has 'x' as a divisor, then I know I won't
 * be able to find a divisor in [n/x, n] that I don't know already (assuming
 * I'm following the procedure of listing divisors by pair each time I find
 * them).
 * That really goes a long way towards making this algorithm fast when numbers
 * become big.
 */
var getDivisors = function(number) {
  divisors = [1, number];

  var candidateDivisor = 2;
  var maxDivisor = number/2

  while (candidateDivisor < maxDivisor) {
    if (number % candidateDivisor === 0) {
      divisors.push(candidateDivisor);

      // That's the smart part:
      // - Push the "pair" divisor
      divisors.push(number/candidateDivisor);
      // - And update the search limit
      maxDivisor = Math.max(candidateDivisor, number/candidateDivisor);
    }
    candidateDivisor++;
  }

  return divisors;
};

console.log("Answer to problem #12 is: " + findTriangleNumberWithMinDivisors(500));
